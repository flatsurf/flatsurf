=====================
intervalxt Change Log
=====================

.. current developments

v2.1.1
====================

**Fixed:**

* category collection in changelog
* added sample headers to `flatsurf.hpp` so they can be used without explicit `cppyy.include` from pyflatsurf
* do not report trivial connection coming from a half edge in `SaddleConnectionsSample`



v2.1.0
====================

**Added:**

* operator bool for Bound to check whether a Bound is non-zero

**Performance:**

* improved vector operations with trivial bounds
* `SaddleConnectionsSample` to iterate through saddle connections randomly

**Changed:**

* `SaddleConnections` can now be iterated indefinitely without giving a bound.
* `SaddleConnections` and `SaddleConnectionsByLength` now support a `lowerBound`.

**Fixed:**

* fixed operator bool of `Vector<Arb>`



v2.0.1
====================

**Fixed:**

* Require a `libintervalxt` without known memory leaks
* Explicitly clean up FLINT during test runs so we can find memory leaks with gperftools strict/draconian settings.



v2.0.0
====================

**Changed:**

* Removed `std::unique_ptr` and `std::shared_ptr` from the public API. This is
  a breaking change that has changed large parts of the interface, see #214.

* `FlatTriangulation::fromEdge` is now called `fromHalfEdge`.

* `FlatTriangulation::slot` is now called `slit`.

* `FlatTriangulationCombinatorial::slot` is now called `slit`.

* `FlatTriangulation::fromEdgeApproximation` is now called `fromHalfEdgeApproximate`.

* `FlatTriangulationCollapsed::fromEdge` is now called `fromHalfEdge`.

* The serialization format (which we do not consider part of the stable API.)

* Moved Delaunay triangulation code into `FlatTriangulation` as a pair of
  `delaunay()` method.
* methods that modify a `FlatTriangulation` now return a `Deformation`.
  Currently that `Deformation` only wraps a `FlatTriangulation` but eventually
  we'd like to add information on how say vertices in the deformed surface
  relate to vertices in the original surface and such.

**Removed:**

* Some workarounds for bugs in cppyy. These are not necessary with the latest
  cppyy 1.8.3 anymore.

**Fixed:**

* Fixed printing of some objects from Python.

* Implemented missing methods in `SaddleConnectionsByLength`.

* Removed some internal hacks such as the `Lengths::register` hack that was
  used to get weak pointers right.

* Simplified `noexcept` qualifications on all methods in the public API



v1.2.0
====================

**Added:**

* `FlatTriangulation::removeMarkedPoints` which will hopefully speed up GL2R Orbit Closure computations

**Fixed:**

* several `FlowConnection` methods are much faster now. This speeds up `FlowComponent::triangulation` substantially.



v1.1.3
====================

**Fixed:**

* worked around a segfault during iteration of saddle connections by length from the Python interface due to https://bitbucket.org/wlav/cppyy/issues/271/next-implementation-does-not-respect
* segfault when iterating saddle connections by length from Python (a header was missing in cppyy.hpp)
* colinearity check in FlowDecomposition::parabolic



v1.1.2
====================

**Added:**

* convenience methods `decompose`, `cylinders`, `minimalComponents`, `undeterminedComponents` to `FlowDecomposition` Python object

**Changed:**

* printing of `FlowDecomposition` which now shows how the decomposition decomposes into cylinders, minimal, and undetermined components
* [gmpxxll](https://github.com/flatsurf/gmpxxll) is now required at build time for the integer interface of intervalxt

**Fixed:**

* `algebraic_ring` consistently returns a SageMath ring
* Adapted to changes in cppyythonizations 1.0.0
* `Lengths` for `mpz` and `mpq` which were broken because we returned a reference to a temporary in one place



v1.1.1
====================

**Fixed:**

* compilation with some versions of gcc (missing include)
* a performance problem in `makeUniqueLargeEdges` which showed up at times in unfoldings of polygons with exact-real coefficients



v1.1.0
====================

**Added:**

* Serialization for most basic types, i.e., everything but the FlowDecomposition types

**Fixed:**

* Chain::operator==



v1.0.3
====================

**Added:**

* a DOI badge to the README for citations

**Fixed:**

* some compiler warnings with very recent GCCs



v1.0.2
====================

**Added:**

* DOIs are now generated by [zenodo](https://zenodo.org)



v1.0.1
====================

**Added:**

* safety checks for rever deploy script

**Fixed:**

* configure now allows version 6 and 7 of fmt since we do not use any version specific features



v1.0.0
====================

**Changed:**

* release with rever



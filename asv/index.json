{"project": "flatsurf", "project_url": "https://github.com/flatsurf/flatsurf", "show_commit_url": "https://github.com/flatsurf/flatsurf/commit/", "hash_length": 8, "revision_to_hash": {"0": "94617bffc21e6e6cc7c54368f0e3aec386b5a6f4", "153": "9a0f8d05318434793aec3512fc810d56a11a2832", "154": "c857caa9fa670b35690506b9e823cfc6e766b7a6", "158": "d717c638c4161d2d9ec3dcd1ba52e02cf25c6769", "160": "241260e7adf7731ae3ec09c5f476fea4a4facfb0", "171": "770c87d030659426ccdcec08a5bdc84bf96f459f", "173": "f21d9e4385744fde708e62237fa0d778f027dc98", "175": "f0b485a27dbe3f9ef0a00094db2c940bccf1cdd4", "178": "d8bdb593712396f5abb40eb0a313ae2eb102c738", "183": "755805d0731467df9d525835b99802bcbd3348a8", "191": "50fa46392b4161da88aba9f211c10bd9c30c1d9f", "197": "ab7c12291610d565256cc45a86500dc3a8cb3823", "202": "0eabbd1b43d1eabbeccf9cae2f12ee949477e88b", "204": "c9c04320fbac1d51b341c3a265ca9e88f1450a83", "208": "4ebc3c1e43359395bbb47eaeea001f142209a071", "210": "ff3c94de340a851ac332e1b576e3713d3464d92a", "212": "b764b3b72753d12c603995c3ea32006b7da9ab99", "213": "73a28fffbc6340f275960e6729104e8b06117285", "215": "5777119b3cef32469e5bc039c70140ad05cf01ee", "217": "8b2f99b085319b478f2ea97d6514b810cc4e4039", "221": "a96ebcc838cae153c87e0b184f9aa4c54d43e459", "223": "2fc68be1c42c1ab27e1d275aea61652c8ce3fb91", "225": "58db38208b06125157e845f8bffddc39da89bb73", "227": "f6ea7e06c4314c11703820e33ed229571f6c62ed", "249": "eb8f7f9abd1d75c72f6e54f44f63d5bda7b1ea53", "256": "411b76243d435730a6d6cb519e8017540c5b83a0", "261": "8e1cebe0dce1b36f3f31d4b5ce9ae1fdc0233344", "262": "9e5b9619148c52994985304380450d9e11fc3ba9", "266": "61282291f6ecd5dea2adda84886c5bd6e5224b27", "268": "e6292fc5813eeb3e4134bb21871d744f3b183b9d", "272": "4cabc736fac5c219a5a55b76bd6eaa3cef28fcf2", "277": "59800eccac743c7e51b008a1f9f04dcf3d86b53a", "279": "48cefe67e2ef5d3b1f4a69473c87c0bde1b62501", "314": "fdf6fdb0b33928704759d93d21884ace34911e15", "316": "ca433a13d67a180f931d0c5f344f391304d86984", "328": "3067038884e932fb9fe7de11bdc6df281baafb9f", "350": "6dd7febbd8190192e236ae604c39f815807b6a0c", "592": "c6803f266078eefa3a76d87cddea78bb8ee529f4", "600": "a7643128766209c00c086cac76a12c5a8ad1c197", "605": "b39465498a35947a67d0e5095beee5ec5fb914d5", "620": "5d9e9e27788d4e3032199cd2b9466fea8e39a859", "624": "68dfc5ffed40134acb3bfffa105c49414f61ca88", "626": "b0c654b804a2c5efbee62369953867d6b868717b", "630": "cf50f03fd7856a704d29a035e3d80df98f2caf0b", "639": "4c05f958e15f86fa7936b07cc807638db2c45df5", "647": "b7738e655220a72ccfac2d9e325d8b7793a2ec3a", "650": "f0db1c6c411bbba7cea64e919cc5c394d4ff7701", "658": "a5978a1527116e9fcd6174078775c2eaad464605", "666": "8e2fb6fb69d291491ddbb72d3809f915770c5fce", "673": "a1309b003eead1a0753d56f72ff65078f1fd836e", "677": "0f13ca6d60237c42ff3810b558be46b1858c8d95", "706": "5d6a44404c32f83a204243aa15e07c8057b4f9d1", "709": "2bd6ae0fd3e56d9c8f17c4b91737e96a248347b2", "712": "f8c3abea10c6311e70ef03da26537f00df04d5cc", "716": "2690b73fd464c9343068eff2913fd2e6c1a10968", "719": "b5f4936f18cd8699eaeaa454107df14d82174701", "728": "b0e024bb0497260eebd34df62ce8bc91c80c9876", "738": "5b50dfc895fb204d0ab67e3901e2f8fbd427506b", "739": "94be4571fa30b4e1f0d03825d653a63814346ebe", "740": "2327304ce6d1115c3505142c53656cb5332f3f84", "742": "9be943313df296031a6ac3ae1a5e42f257ef82ba", "749": "5dd3e7be0afbab8a9e11c61081e57c0b0841d370", "753": "cf3ec7e445009a408a59f1657f8acea3ce7df027", "755": "c0f81588941be4d044ada1fb5d9c03a1fb18a88a", "764": "e7cb8f1a06ed4807d9a4e8c68b5094ac046a935e", "770": "1c12d09e1f6ef2f38d92ae5092d4f4af38137b97", "772": "97ddd1d4aa36c9447c4a431a7fdca4f0007f9905", "775": "69544503e52bec25d333bad640bf84474ab15d7f", "805": "68f70c872e151e96061ec5b9d489e783e566d9f0", "810": "94b80c17bdcf15bc5921b4537addae5eca6a4b9c", "812": "f7f2ebd0fdfb64b79881d2cf36fd738a8a3cef69", "820": "33cbf0a5f4e32657e88c5224e8ee976dc49db01b", "823": "4b5256330dcc9980dcb138631b150968ecb2a95f", "825": "0ee7889a236b94abe6561119c2920d7e46796e19", "829": "a7eae7ba4e85dbfe33591f69471849f361326c7a", "832": "e7e2420e8488eacd349b0e7c7bbf4e7b0db5c595", "835": "d478589d09273b217322e443ccc120edb3e9cf12", "838": "8ade5b2b9dc64d41a5b4b1bdcd5d52b92e38f53a", "859": "6ee231ec809a201395fa14e67c883ce69c45c054", "862": "6abbedbfee70075d338cb7f2372b34898d2f410d", "864": "3fd4e46fc33457733cad639cbf361182b496739f", "872": "bcc54b4771078880f5aa4d6a41aa3780aa92d22a", "880": "6b9cc63d3678b14c37b5d0315a4368a7548ee562", "882": "e5ab2f298e30d5f817a8eb574ec95c22c7953140", "883": "021c7b5b3bed416f9c063c085f38788309051ca0", "889": "63ee97854a1bc8e13aecbe239beebc39db7e45a3", "892": "d8ec1df020113ac7b2410d3a050569ffc174952f", "893": "476eda90997e40668b06d792d4ee2a19fc6cd9fa", "899": "c511a29404db9592c8aaa275c54b514273324a85", "902": "af28908f45fad8c6f0cd80baa03009b939bbda93", "906": "8814ea3c05f03e8ba0ed27ecf93175f1d7cd6439", "908": "dc5b1e9dbf15e41abee281e26a60bae5c61ba4e8", "911": "168155ecaeac7dc3abc1d578e5f69ed699a14ea5", "915": "d93f939530b339c024a3a4d49174af60057c031f", "918": "c2818a94b7e761dfe163a941ee613c1e15aa87e8", "920": "92aec96f5b0cba1926deecf1cc97326a34c61750", "926": "d97c7de9f813ced4f24c80c56bf80b5eef3a57e3", "930": "b4e1cb49df553ab4d2c6976773cd54d60bcc0954", "933": "6057ecf1f2d9c4198c6fde1924e22a4e33f94f5f", "936": "2a00f3e3e4e680a4ef53870bd47f920b3e7e2d29", "940": "1e1ae3777fceae02cbd0079a1cd8cc2da2ad8c51", "943": "f9ffd9ce5b2cd867f4a1d3b6a40410f274559366", "946": "2146f88e905cb8532c318e4a25e3ca5df7c1edb2", "949": "764da37024f45272b836121f4bc1b4bfe4bacdde", "952": "301cd91a7f23990608c1eea28beb3d574bee8bdc", "973": "9957db4dcc1159b929cf7b5567031e7e7839c24a", "980": "c4068839c22b0793145ecf509eea53a49699955b", "988": "0eef2e7aa31d824d28ab330692aa18871a55d266", "994": "9adb6f057aba031540ccf89670797b587fb7119d", "999": "6e584be69ca51460e0a0d02734b1ca17baae68c9", "1008": "f28c0484fe844fcf41b229f1734ecee61a57170f", "1009": "bcf9f07292ca69fa51f5c071dd2b306714d41a3c", "1010": "ee0e9e5d600bb57ec562132a0382df59b4362523", "1012": "74115ddc3268e2b0e6328a30a416ac2e515fd68d", "1022": "e125eadf767f977ea8f9af373ab67f579d0a9992", "1030": "b63ce666686bef69231fad22691877f2b32ea5cc", "1031": "9246ac05011c23842829613e47506bcf6aa31ba7", "1037": "bee51a24cd961dac9fe2c8147a5b0625f961a053", "1042": "abb0b54c3c66627e69d3a00c2ae6a465c2d177f1", "1044": "79ee2a65cf4c14dd6cff765d7cd44d70270205e5", "1054": "91327ff1fb382edee5105ac78ef84800798951b8", "1057": "127fdf7d94a68e162bbca517d9c88806583b5097", "1068": "f72f10e5e0003f97d4cc021e5da6c6ed3d2f26fd", "1069": "8530939dcb265c5109c90d820b2f20ef7a568c2d", "1075": "739fbd22a38dec82efbc9a51997d99d91850d342", "1076": "885a9fda5df42d495b9ee5a567387ccd7f055a8d", "1083": "f18c6ba808d5115d3ce33989dbf78de4275824c7", "1085": "5f2cbbcfc4a8ec426508b781e3514700295740a4", "1091": "55633625c74eef46e1224aa9393aca74476aa4fc", "1093": "ad7ea0b476b42632764a4673bcebe6e0497cae84", "1099": "c0fae00d3f9ad95033962a14c551259fbf4ab4c1", "1104": "2fc5a17bd0566a18c74dad6c5994015bde519a79", "1118": "dccc9596dc220c402ca0441b6a8f8411aceba755", "1123": "aece25b591f0fda3d4453c693f97ff7acbcc6c2d", "1127": "995e812ef2dd9afcf7dd6f9ed0a99ec2224041a3", "1132": "a168b3ad8376814ce40979dc8deadcf8d8ad1a33", "1136": "805fe3a6872ef512e60ae78e60761ad68d8e8b5f", "1139": "601e7c12a18071f332ddc196c3d33f533c395df6", "1140": "c7e64180786891c0319e6f0df6433e2e6c7ca0c6", "1147": "701b7a5a188b53d5414e572e2e8c136bc889c276", "1150": "6ff66582deea3cf3fb9b905accf0dcfcc3a0481a", "1182": "b18bb14cedad2a6b7b6d47cc9a34fd78ad54794a", "1187": "502e09ce6f302e3cea9bf1e8ee38145e24f31b02", "1193": "990c9e785e9aedeac6207dbb66922a42b781c89f", "1196": "da9aa44de92791b55760e2b53535f4d756def07d", "1197": "9dd659cbfe915ec9ec744c068b352c77f2a76282", "1203": "00fedc369437a6bd8f0dcfa0b04803cb87fb250a", "1206": "dde90789b973f2f6fffd06794c646f38ccae7786", "1212": "e0e8f7bdbeb0294962e53a50523da8035225cc6d", "1214": "826457c348333f055016d8418dded89c5dc5be99", "1223": "c641a1d4f3e1962c2693c9fad746c45f1af09a2a", "1226": "ba4ee32163a9e18dfa3f245e405a3d10e90ec564", "1235": "4c4af921e9aa303488557feaafbb0a8dadb588a7", "1241": "33762a652c76e7e15453bcea74107bff1a097d1c", "1245": "a7494e44a7e1978157a73807dfa2e73ad3751c38", "1250": "3e140e2ea071e5837b56ad350ed5e8dab47a8424", "1265": "2482c05d0e71709987a46b01e3068a776441e74c", "1270": "96679fe98b1f6c576964c966884d0a52a82a5e98", "1277": "68fcd3408f1a1f4dc9bc92278fe592a3dd6c952b", "1282": "9ffd649a9a698a66eb0b66b543e124596d732e3b", "1286": "55d3acc9bc1e4c05f12137c89647f97e1d552eab", "1289": "49d18bb449c861eb9b0934f12155ee7525834a15", "1297": "9c4c60f4d51821a8d264a29ea5cb4cf0ea6ff80e", "1301": "bb3ba17f6d88b918dcc0968388a7093a9fcfca99", "1305": "ebfac50770e69e6e13289870daa1b5d65a98bdf7", "1315": "9834f76331e9e5b3f96e17256affdc09a81e91fe", "1319": "c16a94a12a9c1a216ff28d7742714c81de779893", "1330": "9712f3d8c1e008f584041112886a3123f38280c8", "1332": "924343dbe21b995fba864d6a19f0bbb7bee01adb", "1339": "7b611a3f8ca4dfe788b4bc8e40ab2ee02c94c348", "1341": "7dc89591976bd1692218dea82a0c61068a992445", "1349": "ee7ad1ed0ecccb1ee4a1639394cd49502606a787", "1353": "229b5fae50369209d6834b7ba3847fc26d6a9448", "1355": "ad30f6855f77bfcacbe2c7cebb574c9f7deb0767", "1365": "df0ebaacf9de071af8bb3519a2ea92cade593aff", "1370": "ebd14303bbc6581c14e4b166d1301189b02d606e", "1373": "d7ab505fefc95ff5c0ee066a6999681bd6349fa5", "1378": "d138f2ed07bc7f1ca064454f0fe483b6f20cd9d0", "1382": "82e567a0a719f624c73555821a4ea673647c5835", "1392": "954f9668ababb32d38648307c8d26b98ce7cf144", "1394": "aeaa6dffcd862880c1226adb5728b80d6201e0d8", "1400": "241b3ed356ccbad4e3248ad1165c285fe79e6d1b", "1404": "290a28c28321a1731ebbab7350eb3af3a2d05f0b", "1408": "c6cdfeec12bf1e3e28d00df4e259d6a3c4946e4a", "1440": "afeea18f71b91c80765ccbd53dfccdfe7d1f7ebb", "1444": "98f910eccfe501324c5a515690499cd5a8d7c53e", "1473": "056cce39f89bb6a694fdc64284a0aa8a320beaa0", "1477": "61e5076ddff36bc85367df260ccfd6a0a23886a4", "1488": "d114c6c2aaf523be4a53f822412f0242359b1be3", "1502": "660f3e3ddabbac9de62cd6426aa1b766e36dcdf3", "1504": "7888190d7ae032744a9307d9af2e8f63537f5a98", "1510": "81da1a45adb24b7f332934ea7e853a0e6787100b", "1522": "6a097e12d8493c9d18e0a41aecedc96e2fdf6bcd", "1610": "1e8670d7d95ff46261a311aa3cdefc2aeb3674f1", "1623": "2e4fedaecced16a695d791356bccf5a62c89dfac", "1627": "c73b443eb6781173384293dd7f483677a0ec32b8", "1631": "9f51a6df8a13f022ec62056f8b0bb1ad80218e02", "1633": "e82983d80a606868ee300655336347673ee316c6", "1640": "1fb591f2c9f204bd0ed1cebbab3b13648086ec20", "1642": "51258578649373e8d6e51fa9a80acbb858cdcc4f", "1655": "30df5c9d5f9f9a7a15ed9b61535cbdf0849ac993", "1659": "b7a8e0e791bac13018bcec3c54eb9e38bb278081", "1670": "072d684faa413069a103177d9afb5d2c09ddca61", "1675": "5c75edb89daa25ae751a06b83b364a7665bc7989", "1692": "6f6d780b13b79f511f0887d109c008cc3d603c7b", "1696": "fc05f940104a0a895fd59512dba87aa3d4260053", "1700": "a6e8c3df30ef6686ece4de51780a22a168de699f", "1708": "53fd3235cb552f3ed24f9c5c8a26a1d53588e41f", "1710": "4784e943faa83040529a69a43e22559cf5440bd1", "1725": "edfbc0f252be0ee78c2f55b60f7ae4f229627960", "1730": "17938bcf3ae119bd70070a6ea3392faa433a60a6", "1734": "056b2b24f8272e3380abd3a961be0c3eff2d6309", "1740": "20972db5601fb45f8d7f5eb73e933bfdcb915caf"}, "revision_to_date": {"0": 1547297444000, "153": 1558186883000, "154": 1558188589000, "158": 1558190109000, "160": 1558197193000, "171": 1558213750000, "173": 1558215169000, "175": 1558217967000, "178": 1558231093000, "183": 1558444300000, "191": 1558452817000, "197": 1558564258000, "202": 1558575641000, "204": 1558577314000, "208": 1559222002000, "210": 1559224597000, "212": 1559228426000, "213": 1559228760000, "215": 1559229326000, "217": 1559230010000, "221": 1559231740000, "223": 1559233654000, "225": 1559235703000, "227": 1559236711000, "249": 1561078509000, "256": 1561230252000, "261": 1562262817000, "262": 1562263549000, "266": 1562479127000, "268": 1562492465000, "272": 1562495744000, "277": 1562505249000, "279": 1562599926000, "314": 1565625234000, "316": 1565703338000, "328": 1566304469000, "350": 1571191991000, "592": 1585224605000, "600": 1585324451000, "605": 1585330316000, "620": 1585643398000, "624": 1585652933000, "626": 1585735515000, "630": 1585747060000, "639": 1585921903000, "647": 1586002380000, "650": 1586081735000, "658": 1586446416000, "666": 1593391771000, "673": 1593441173000, "677": 1594205010000, "706": 1597585459000, "709": 1597598224000, "712": 1597605449000, "716": 1597610004000, "719": 1597683427000, "728": 1597866732000, "738": 1598623094000, "739": 1598626355000, "740": 1598626431000, "742": 1598626468000, "749": 1598699950000, "753": 1598700238000, "755": 1598700438000, "764": 1598865130000, "770": 1599175426000, "772": 1599175574000, "775": 1599225896000, "805": 1600555041000, "810": 1600573064000, "812": 1600573166000, "820": 1600626328000, "823": 1600631044000, "825": 1600631122000, "829": 1600691774000, "832": 1600730542000, "835": 1600772770000, "838": 1600784502000, "859": 1601232197000, "862": 1601241860000, "864": 1601560215000, "872": 1601858962000, "880": 1602715558000, "882": 1602715648000, "883": 1602717179000, "889": 1602776063000, "892": 1602781473000, "893": 1602781617000, "899": 1604606627000, "902": 1604614452000, "906": 1604694421000, "908": 1604714684000, "911": 1604772505000, "915": 1604799378000, "918": 1604803233000, "920": 1604803373000, "926": 1604877847000, "930": 1604914734000, "933": 1604923230000, "936": 1605403691000, "940": 1605670599000, "943": 1605675476000, "946": 1605682687000, "949": 1605779355000, "952": 1606339973000, "973": 1608420115000, "980": 1608584106000, "988": 1609252330000, "994": 1609262459000, "999": 1609275884000, "1008": 1609280863000, "1009": 1609280871000, "1010": 1609280892000, "1012": 1609281052000, "1022": 1610125665000, "1030": 1611004631000, "1031": 1611004645000, "1037": 1611946133000, "1042": 1611954652000, "1044": 1611955055000, "1054": 1612045289000, "1057": 1612045622000, "1068": 1613227261000, "1069": 1613227280000, "1075": 1613229998000, "1076": 1613230016000, "1083": 1613231792000, "1085": 1613232139000, "1091": 1613239023000, "1093": 1613239812000, "1099": 1613558077000, "1104": 1613561266000, "1118": 1613651898000, "1123": 1615487694000, "1127": 1617190260000, "1132": 1617191499000, "1136": 1617827121000, "1139": 1617827191000, "1140": 1617827261000, "1147": 1617835631000, "1150": 1617837465000, "1182": 1622148184000, "1187": 1622153436000, "1193": 1623072781000, "1196": 1623072826000, "1197": 1623072898000, "1203": 1623868643000, "1206": 1623868792000, "1212": 1623942412000, "1214": 1623942554000, "1223": 1624101431000, "1226": 1624101612000, "1235": 1625493179000, "1241": 1625659534000, "1245": 1625741476000, "1250": 1627399401000, "1265": 1634678366000, "1270": 1635803261000, "1277": 1636192128000, "1282": 1636210911000, "1286": 1636236844000, "1289": 1636236951000, "1297": 1636278527000, "1301": 1636296304000, "1305": 1636541122000, "1315": 1636774854000, "1319": 1636818912000, "1330": 1636943025000, "1332": 1636943079000, "1339": 1639854884000, "1341": 1639855101000, "1349": 1641330243000, "1353": 1641333052000, "1355": 1641333488000, "1365": 1642376465000, "1370": 1642378917000, "1373": 1642380485000, "1378": 1642386318000, "1382": 1642391556000, "1392": 1646977754000, "1394": 1646977868000, "1400": 1649542850000, "1404": 1649591038000, "1408": 1655193177000, "1440": 1659525271000, "1444": 1659585846000, "1473": 1661779886000, "1477": 1661788603000, "1488": 1662418099000, "1502": 1663095937000, "1504": 1663096830000, "1510": 1663162184000, "1522": 1668173472000, "1610": 1673656032000, "1623": 1673877630000, "1627": 1673894341000, "1631": 1673902936000, "1633": 1673903000000, "1640": 1673910574000, "1642": 1673910617000, "1655": 1681444411000, "1659": 1681471233000, "1670": 1703902048000, "1675": 1703915159000, "1692": 1703990772000, "1696": 1703991743000, "1700": 1704775936000, "1708": 1704855104000, "1710": 1704855274000, "1725": 1704911463000, "1730": 1705706361000, "1734": 1705737452000, "1740": 1719961775000}, "params": {"arch": ["x86_64"], "cpu": ["Standard_DS2_v2"], "machine": ["Azure"], "os": ["Linux"], "ram": ["61830880"], "python": ["3.12", "3.6", "3.7", "3.9"], "arb": [""], "automake": [""], "benchmark==1.5.0": [""], "boost-cpp": [""], "ccache": [""], "cppasv": ["", null], "cppyythonizations": [""], "cxx-compiler": [""], "fmt": [""], "gmp": [""], "gmpxxll": [""], "gmpxxyy": [""], "libeantic": ["", null], "libexactreal>=2.2.1": ["", null], "libintervalxt>=3.0.0": [""], "libtool": [""], "make": [""], "pyexactreal>=2.2.1": ["", null], "setuptools": [""], "e-antic": ["", null], "libexactreal>=1.3.2": ["", null], "pyexactreal>=1.3.2": ["", null], "Cython": ["", null], "gtest": ["", null], "bash": ["", null], "e-antic>=1.0.0rc4": ["", null], "benchmark==1.4.1": ["", null], "eigen": ["", null], "libexactreal": ["", null], "ntl": ["", null], "flatsurf::cppasv": ["", null], "libexactreal>=3.0.1": ["", null], "pyexactreal>=3.0.1": ["", null], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppasv": "", "cppyythonizations": "", "cxx-compiler": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libeantic": "", "libexactreal>=2.2.1": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=2.2.1": "", "setuptools": "", "branch": "master", "e-antic": null, "libexactreal>=1.3.2": null, "pyexactreal>=1.3.2": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppasv": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "libeantic": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "arb": "", "automake": "", "bash": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "e-antic>=1.0.0rc4": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "cppasv": null, "libeantic": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "Cython": null, "gtest": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.7", "arb": "", "automake": "", "bash": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "e-antic>=1.0.0rc4": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "cppasv": null, "libeantic": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "Cython": null, "gtest": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppasv": "", "cppyythonizations": "", "cxx-compiler": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libeantic": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "e-antic": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "flatsurf::cppasv": "", "cppyythonizations": "", "cxx-compiler": "", "libeantic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=3.0.1": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=3.0.1": "", "setuptools": "", "branch": "master", "cppasv": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "e-antic": null, "libexactreal>=1.3.2": null, "pyexactreal>=1.3.2": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "cppasv": null, "libeantic": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.12", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "flatsurf::cppasv": "", "cppyythonizations": "", "cxx-compiler": "", "libeantic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=3.0.1": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=3.0.1": "", "setuptools": "", "branch": "master", "cppasv": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "e-antic": null, "libexactreal>=1.3.2": null, "pyexactreal>=1.3.2": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null}, {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.6", "arb": "", "automake": "", "benchmark==1.5.0": "", "boost-cpp": "", "ccache": "", "cppasv": "", "cppyythonizations": "", "cxx-compiler": "", "e-antic": "", "fmt": "", "gmp": "", "gmpxxll": "", "gmpxxyy": "", "libexactreal>=1.3.2": "", "libintervalxt>=3.0.0": "", "libtool": "", "make": "", "pyexactreal>=1.3.2": "", "setuptools": "", "branch": "master", "libeantic": null, "libexactreal>=2.2.1": null, "pyexactreal>=2.2.1": null, "Cython": null, "gtest": null, "bash": null, "e-antic>=1.0.0rc4": null, "benchmark==1.4.1": null, "eigen": null, "libexactreal": null, "ntl": null, "flatsurf::cppasv": null, "libexactreal>=3.0.1": null, "pyexactreal>=3.0.1": null}], "benchmarks": {"CopyAssignChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CopyAssignChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "CopyConstructChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CopyConstructChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "CreateChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CreateChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipCollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCollapsedFlipUncollapsed\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationCombinatorialFlip.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationCombinatorialFlip.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationEquality\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationEquality\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationEquality\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationEquality\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationEquality\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationEquality\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationEquality\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationEquality\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationFlip\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationFlip\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "FlatTriangulationTrivialEquality\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "FlatTriangulationTrivialEquality\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "HalfEdgeIndex.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "HalfEdgeIndex.track_time", "param_names": ["param1"], "params": [["'-1'", "'1'"]], "type": "track", "unit": "ns", "version": "0"}, "MoveChain\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "MoveChain\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "PathConstructor\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "PathConstructor\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "PathConstructor\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "PathConstructor\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionUnaryMinus\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionUnaryMinus\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionUnaryMinus\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionUnaryMinus\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsByLength\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsByLength\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsByLength\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsByLength\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsLWithSlit\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsLWithSlit\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsLWithSlit\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsLWithSlit\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsL\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsL\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSampleSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSampleSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'256'", "'65536'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8eantic\u2237renf_elem_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8long long\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "SaddleConnectionsSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "SaddleConnectionsSquare\u27e8Vector\u27e8mpq_class\u27e9\u27e9.track_time", "param_names": ["param1"], "params": [["'1'", "'8'", "'64'"]], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorArb\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorArb\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorCcw\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorCcw\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivInt\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivInt\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorDivMpz\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorDivMpz\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorEqVector\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorEqVector\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorLtBound\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorLtBound\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorMinus\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorMinus\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorOrientation\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorOrientation\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPerpendicular\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPerpendicular\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorPlus\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorPlus\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesInt\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesInt\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesMpz\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesMpz\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorTimesVector\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorTimesVector\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8eantic\u2237renf_elem_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8eantic\u2237renf_elem_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237IntegerRing\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237NumberField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8exactreal\u2237Element\u27e8exactreal\u2237RationalField\u27e9\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8long long\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8long long\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8mpq_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8mpq_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VectorUnaryMinus\u27e8mpz_class\u27e9.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VectorUnaryMinus\u27e8mpz_class\u27e9.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VertexAtSource.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VertexAtSource.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}, "VertexAtTarget.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "VertexAtTarget.track_time", "param_names": [], "params": [], "type": "track", "unit": "ns", "version": "0"}}, "machines": {"Azure": {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "version": 1}}, "tags": {"0.0.0": 0, "0.0.1": 666, "0.0.1-alpha.0": 658, "1.0.0": 728, "1.0.1": 738, "1.0.2": 742, "1.0.3": 753, "1.1.0": 764, "1.1.1": 772, "1.1.2": 812, "1.1.3": 825, "1.2.0": 838, "2.0.0": 862, "2.0.1": 872, "2.1.0": 882, "2.1.1": 892, "2.2.0": 902, "2.2.1": 920, "2.2.2": 926, "2.2.3": 933, "2.3.0": 949, "3.0.0": 1012, "3.0.1": 1037, "3.0.2": 1044, "3.1.0": 1057, "3.10.0": 1355, "3.10.1": 1382, "3.11.0": 1394, "3.11.1": 1404, "3.11.2": 1444, "3.11.3": 1477, "3.12.0": 1504, "3.13.0": 1627, "3.13.1": 1633, "3.13.2": 1642, "3.13.3": 1659, "3.13.4": 1675, "3.13.5": 1696, "3.14.0": 1710, "3.14.1": 1734, "3.14.2": 1740, "3.2.0": 1085, "3.3.0": 1093, "3.4.0": 1104, "3.4.1": 1123, "3.4.2": 1132, "3.5.0": 1139, "3.6.0": 1187, "3.6.1": 1196, "3.6.2": 1206, "3.6.3": 1214, "3.6.4": 1226, "3.7.0": 1270, "3.8.0": 1282, "3.9.0": 1289, "3.9.1": 1305, "3.9.2": 1319, "3.9.3": 1332, "3.9.4": 1341, "v0.0.0": 0}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}